{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red71\green71\blue71;\red242\green242\blue242;}
{\*\expandedcolortbl;;\cssrgb\c34902\c34902\c34902;\cssrgb\c96078\c96078\c96078;}
\paperw11900\paperh16840\margl1440\margr1440\vieww20780\viewh16740\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs30 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 __global__ \
void Convo (float2 *odata1, float2 *odata2, int id, int nx, int ny) \
\
\{   \
\
// TW is the logical tile width (40 elements).    \
\
// TH is the logical tile height (24 elements).    \
\
// RW is the tile width including the filter support region.    \
\
// IT is the number of input elements per thread (4).    \
\
// OT is the number of output elements per thread (3).    \
\
// FR is the convolution filter radius (4 elements).    \
// Compute local and global thread locations.    \
\
int ltidx = threadIdx.x;   int ltidy = threadIdx.y * IT;   int gtidx = blockIdx.x * TW + ltidx - FR;   int gtidy = blockIdx.y * TH + ltidy - FR;   int tltid = ltidy * RW + ltidx;   float2 term;   int i;   \
\
// Each thread reads 4 input values from global memory.    \
\
// The loop is for clarity and should be unrolled for efficiency.    \
\
for (i = 0; i < 4; i++) \{     term = texfetch(itexref, gtidx, gtidy + i);     smem[tltid     ] = term.x;     smem[tltid + IO] = term.y;     tltid += RW;   \}   __syncthreads();   \
\
// Each thread compute results for 3 output values.    if (ltidx < TW) \{     int rtlt = (threadIdx.y * OT + FR) * RW + (ltidx + FR);     int itlt = rtlt + IO;     int gthx = blockIdx.x * TW + ltidx;     int gthy = blockIdx.y * TH + threadIdx.y * OT;     int rind = gthy * nx + gthx;     int index;     float vel, floorvel, residus;     float2 term0, term1, temp, temp2;     \
\
// Compute one element for 3 consecutive lines.    if (gthx < nx) \{       \
\
// The loop is for clarity and should be unrolled for efficiency.    \
\
for (i = 0; i < 3; i++) \{         if (gthy < ny) \{           temp   = texfetch(otexref, gthx , gthy);           temp.x = (smem[rtlt-   4] + smem[rtlt+   4])*coeff_X[4] +                    (smem[rtlt-   3] + smem[rtlt+   3])*coeff_X[3] +                    (smem[rtlt-   2] + smem[rtlt+   2])*coeff_X[2] +                    (smem[rtlt-   1] + smem[rtlt+   1])*coeff_X[1] +                    (smem[rtlt-4*RW] + smem[rtlt+4*RW])*coeff_Y[4] +                    (smem[rtlt-3*RW] + smem[rtlt+3*RW])*coeff_Y[3] +                    (smem[rtlt-2*RW] + smem[rtlt+2*RW])*coeff_Y[2] +                    (smem[rtlt-  RW] + smem[rtlt+  RW])*coeff_Y[1] +                     smem[rtlt     ]*(coeff_X[0]+coeff_Y[0]) - temp.x;           temp.y = (smem[itlt-   4] + smem[itlt+   4])*coeff_X[4] +                    (smem[itlt-   3] + smem[itlt+   3])*coeff_X[3] +                    (smem[itlt-   2] + smem[itlt+   2])*coeff_X[2] +                    (smem[itlt-   1] + smem[itlt+   1])*coeff_X[1] +                    (smem[itlt-4*RW] + smem[itlt+4*RW])*coeff_Y[4] +                    (smem[itlt-3*RW] + smem[itlt+3*RW])*coeff_Y[3] +                    (smem[itlt-2*RW] + smem[itlt+2*RW])*coeff_Y[2] +                    (smem[itlt-  RW] + smem[itlt+  RW])*coeff_Y[1] +                     smem[itlt     ]*(coeff_X[0]+coeff_Y[0]) - temp.y;           vel      = texfetch(vtexref, gthx, gthy);           floorvel = floorf(vel);           index    = floorvel;           term0    = texfetch(ltexref, index, id);           term1    = texfetch(ltexref, index + 1, id);           residus  = vel - floorvel;           term0.x  = term0.x + residus*(term1.x - term0.x);           term0.y  = term0.y + residus*(term1.y - term0.y);           temp2    = texfetch(olktexref, gthx, gthy);           temp2.x += term0.x*temp.x - term0.y*temp.y;           temp2.y += term0.x*temp.y + term0.y*temp.x;           odata1[rind] = temp2;           odata2[rind] = temp;         \}         rtlt += RW; itlt += RW;         gthy++; rind += nx;       \}     \}   \} \} \
 }